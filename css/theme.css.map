{
"version": 3,
"mappings": "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",
"sources": ["src/scss/neat/grid/_box-sizing.scss","src/scss/_theme.scss","src/scss/mixins/_content.scss","src/scss/partials/_global.scss","src/scss/partials/_headers.scss","src/scss/partials/_fonts.scss","src/scss/partials/_navigation.scss","src/scss/bourbon/addons/_prefixer.scss","src/scss/pages/_index.scss","src/scss/neat/grid/_outer-container.scss","src/scss/bourbon/addons/_clearfix.scss","src/scss/neat/grid/_span-columns.scss","src/scss/neat/grid/_omega.scss"],
"sourcesContent": ["@charset \"UTF-8\";\n\n@if $border-box-sizing == true {\n  html { // http://bit.ly/1qk2tVR\n    box-sizing: border-box;\n  }\n\n  * {\n    &,\n    &::after,\n    &::before {\n      box-sizing: inherit;\n    }\n  }\n}\n","// The colours used throughout the site.\n$base-colour: #444;\n$background-colour: #f5f6f7;\n\n// Primary gradient.\n$primary-gradient-start: rgb(1, 96, 182);\n$primary-gradient-stop: rgb(71, 131, 133);\n\n// Secondary gradient.\n$secondary-gradient-start: #0C8B90;\n$secondary-gradient-start: #AB4180;\n\n// The general spacing between items vertically.\n$vertical-rhythm: 2vh;\n\n// Typography.\n$font-size: 1.8vw;\n$font-family: 'Helvetica', sans-serif;\n$font-colour: $base-colour;\n$font-weight: 300;\n\nhtml, body {\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n\n*+* {\n  margin-top: $vertical-rhythm;\n}\n",".content-column {\n  padding: $vertical-rhythm;\n  text-align: center;\n}\n\n$breakpoints: (\n  'medium': (min-width: 800px),\n  'large': (min-width: 1000px),\n  'huge': (min-width: 1200px),\n);\n\n// Skew this element by N degrees and adjust the margin.\n// @param {Number} $amount - Amount to skew the Y axis.\n@mixin skew-content($amount: -6deg, $margin: true) {\n  // Skew the content on the y axis.\n  @include transform(skew(0, $amount));\n  @include transform-origin(top left);\n\n  // Make sure there's no top margin.\n  margin-top: 0;\n}\n\n// Responsive manager.\n// @link http://sass-guidelin.es/#breakpoint-manager\n// @param {String} $breakpoint - Breakpoint\n@mixin respond-to($breakpoint) {\n  $raw-query: map-get($breakpoints, $breakpoint);\n\n  @if $raw-query {\n    $query: if(type-of($raw-query) == 'string', unquote($raw-query), inspect($raw-query));\n\n    @media #{$query} {\n      @content;\n    }\n  } @else {\n    @error 'No value found for `#{$breakpoint}`. '\n         + 'Please make sure it is defined in `$breakpoints` map.';\n  }\n}\n","// Automatic vertical rhythm.\n*+* {\n  margin-top: $vertical-rhythm;\n}\n\nhtml, body {\n  padding: 0; margin: 0;\n  line-height: 1.7em;\n}\n\nhtml {\n  background: $background-colour;\n  font: $font-weight $font-size $font-family;\n  color: $font-colour;\n\n  box-sizing: border-box;\n}\n\n// Fix link styles.\na {\n  color: inherit;\n  text-decoration: none;\n\n  &:hover,\n  &:active {\n    border-bottom: .1em solid $font-colour;\n    text-decoration: underline;\n  }\n\n  &:active {\n    color: $base-colour;\n    border-color: $base-colour;\n  }\n}\n\n* {\n  &,\n  &:before,\n  &:after {\n    box-sizing: inherit;\n  }\n}\n","h1, h2, h3, h4, h5, h6 {\n  font-family: 'Oswald', 'Helvetica', sans-serif;\n}\n",".lobster {\n  font-family: \"Lobster Two\", Arial, sans-serif;\n  font-size: 1.2em;\n}\n","$rotation: 40deg;\n\n.navigation {\n  height: 11vh;\n  width: 100vw;\n  position: fixed;\n  background: #444;\n  top: 0; left: 0; right: 0;\n  z-index: 2;\n  @include transform-origin(top left);\n  @include transform(rotate(-$rotation));\n  @include transition(all 0.3s ease-in-out);\n\n  &__logo {\n    display: inline-block;\n    border: 0;\n    height: 100%;\n    max-height: 53%;\n    margin-left: .5vw;\n    margin-top: 5vh;\n\n    &:hover {\n      text-decoration: none;\n      border: 0;\n    }\n\n    &--image {\n      display: block;\n      height: 100%;\n      @include transform-origin(50%);\n      @include transform(rotate($rotation));\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n/// A mixin for generating vendor prefixes on non-standardized properties.\n///\n/// @param {String} $property\n///   Property to prefix\n///\n/// @param {*} $value\n///   Value to use\n///\n/// @param {List} $prefixes\n///   Prefixes to define\n///\n/// @example scss - Usage\n///   .element {\n///     @include prefixer(border-radius, 10px, webkit ms spec);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     -webkit-border-radius: 10px;\n///     -moz-border-radius: 10px;\n///     border-radius: 10px;\n///   }\n///\n/// @require {variable} $prefix-for-webkit\n/// @require {variable} $prefix-for-mozilla\n/// @require {variable} $prefix-for-microsoft\n/// @require {variable} $prefix-for-opera\n/// @require {variable} $prefix-for-spec\n\n@mixin prefixer($property, $value, $prefixes) {\n  @each $prefix in $prefixes {\n    @if $prefix == webkit {\n      @if $prefix-for-webkit {\n        -webkit-#{$property}: $value;\n      }\n    } @else if $prefix == moz {\n      @if $prefix-for-mozilla {\n        -moz-#{$property}: $value;\n      }\n    } @else if $prefix == ms {\n      @if $prefix-for-microsoft {\n        -ms-#{$property}: $value;\n      }\n    } @else if $prefix == o {\n      @if $prefix-for-opera {\n        -o-#{$property}: $value;\n      }\n    } @else if $prefix == spec {\n      @if $prefix-for-spec {\n        #{$property}: $value;\n      }\n    } @else  {\n      @warn \"Unrecognized prefix: #{$prefix}\";\n    }\n  }\n}\n\n@mixin disable-prefix-for-all() {\n  $prefix-for-webkit:    false !global;\n  $prefix-for-mozilla:   false !global;\n  $prefix-for-microsoft: false !global;\n  $prefix-for-opera:     false !global;\n  $prefix-for-spec:      false !global;\n}\n",".index {\n  position: relative;\n  margin: 0;\n\n  &,\n  &__snow,\n  &__wildlife,\n  &__about,\n  &__clients {\n    height: 100vh;\n    margin: 0;\n    text-align: center;\n  }\n\n  &__about,\n  &__clients {\n    padding: $vertical-rhythm * 3 20%;\n  }\n\n  &__snow,\n  &__wildlife {\n    display: inline-block;\n    width: 50%;\n    background-size: cover;\n    background-position: bottom;\n  }\n\n  &__snow {\n    background-image: url(/images/index/snow.jpg);\n  }\n\n  &__wildlife {\n    background-image: url(/images/index/wildlife.jpg);\n    background-position: 0 70%;\n  }\n\n  &__header_one {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    max-width: 80%;\n    @include transform(translate(-50%, -50%));\n  }\n\n  &--gradient {\n    background: linear-gradient(135deg, $primary-gradient-start, $primary-gradient-stop);\n    color: #FFF;\n  }\n\n  &__about {\n  }\n\n  &__clients {\n    background-size: cover;\n    background-position: top;\n    background-image: url(/images/index/space.jpg);\n    color: #FFF;\n    @include outer-container(100%);\n\n    .client {\n      @include span-columns(4);\n      @include omega(3);\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n/// Makes an element a outer container by centring it in the viewport, clearing its floats, and setting its `max-width`.\n/// Although optional, using `outer-container` is recommended. The mixin can be called on more than one element per page, as long as they are not nested.\n///\n/// @param {Number [unit]} $local-max-width [$max-width]\n///   Max width to be applied to the element. Can be a percentage or a measure.\n///\n/// @example scss - Usage\n///   .element {\n///     @include outer-container(100%);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     *zoom: 1;\n///     max-width: 100%;\n///     margin-left: auto;\n///     margin-right: auto;\n///   }\n///\n///   .element:before, .element:after {\n///     content: \" \";\n///     display: table;\n///   }\n///\n///   .element:after {\n///     clear: both;\n///   }\n\n@mixin outer-container($local-max-width: $max-width) {\n  @include clearfix;\n  max-width: $local-max-width;\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Provides an easy way to include a clearfix for containing floats.\n///\n/// @link http://cssmojo.com/latest_new_clearfix_so_far/\n///\n/// @example scss - Usage\n///   .element {\n///     @include clearfix;\n///   }\n///\n/// @example css - CSS Output\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: table;\n///   }\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.\n///\n/// @param {List} $span\n///   A list containing `$columns`, the unitless number of columns the element spans (required), and `$container-columns`, the number of columns the parent element spans (optional).\n///\n///   If only one value is passed, it is assumed that it's `$columns` and that that `$container-columns` is equal to `$grid-columns`, the total number of columns in the grid.\n///\n///   The values can be separated with any string such as `of`, `/`, etc.\n///\n///   `$columns` also accepts decimals for when it's necessary to break out of the standard grid. E.g. Passing `2.4` in a standard 12 column grid will divide the row into 5 columns.\n///\n/// @param {String} $display [block]\n///   Sets the display property of the element. By default it sets the display propert of the element to `block`.\n///\n///   If passed `block-collapse`, it also removes the margin gutter by adding it to the element width.\n///\n///   If passed `table`, it sets the display property to `table-cell` and calculates the width of the element without taking gutters into consideration. The result does not align with the block-based grid.\n///\n/// @example scss - Usage\n///   .element {\n///     @include span-columns(6);\n///\n///    .nested-element {\n///      @include span-columns(2 of 6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///   .element {\n///     display: block;\n///     float: left;\n///     margin-right: 2.35765%;\n///     width: 48.82117%;\n///   }\n///\n///   .element:last-child {\n///     margin-right: 0;\n///   }\n///\n///   .element .nested-element {\n///     display: block;\n///     float: left;\n///     margin-right: 4.82916%;\n///     width: 30.11389%;\n///   }\n///\n///   .element .nested-element:last-child {\n///     margin-right: 0;\n///   }\n\n@mixin span-columns($span: $columns of $container-columns, $display: block) {\n  $columns: nth($span, 1);\n  $container-columns: container-span($span);\n\n  $parent-columns: get-parent-columns($container-columns) !global;\n\n  $direction: get-direction($layout-direction, $default-layout-direction);\n  $opposite-direction: get-opposite-direction($direction);\n\n  $display-table: is-display-table($container-display-table, $display);\n\n  @if $display-table  {\n    display: table-cell;\n    width: percentage($columns / $container-columns);\n  } @else {\n    float: #{$opposite-direction};\n\n    @if $display != no-display {\n      display: block;\n    }\n\n    @if $display == collapse {\n      @include -neat-warn(\"The 'collapse' argument will be deprecated. Use 'block-collapse' instead.\");\n    }\n\n    @if $display == collapse or $display == block-collapse {\n      width: flex-grid($columns, $container-columns) + flex-gutter($container-columns);\n\n      &:last-child {\n        width: flex-grid($columns, $container-columns);\n      }\n\n    } @else {\n      margin-#{$direction}: flex-gutter($container-columns);\n      width: flex-grid($columns, $container-columns);\n\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n/// Removes the element's gutter margin, regardless of its position in the grid hierarchy or display property. It can target a specific element, or every `nth-child` occurrence. Works only with `block` layouts.\n///\n/// @param {List} $query [block]\n///   List of arguments. Supported arguments are `nth-child` selectors (targets a specific pseudo element) and `auto` (targets `last-child`).\n///\n///   When passed an `nth-child` argument of type `*n` with `block` display, the omega mixin automatically adds a clear to the `*n+1` th element. Note that composite arguments such as `2n+1` do not support this feature.\n///\n///   **Deprecation warning**: The omega mixin will no longer take a `$direction` argument. To change the layout direction, use `row($direction)` or set `$default-layout-direction` instead.\n///\n/// @example scss - Usage\n///   .element {\n///     @include omega;\n///   }\n///\n///   .nth-element {\n///     @include omega(4n);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     margin-right: 0;\n///   }\n///\n///   .nth-element:nth-child(4n) {\n///     margin-right: 0;\n///   }\n///\n///   .nth-element:nth-child(4n+1) {\n///     clear: left;\n///   }\n\n@mixin omega($query: block, $direction: default) {\n  $table: belongs-to(table, $query);\n  $auto: belongs-to(auto, $query);\n\n  @if $direction != default {\n    @include -neat-warn(\"The omega mixin will no longer take a $direction argument. To change the layout direction, use the direction(){...} mixin.\");\n  } @else {\n    $direction: get-direction($layout-direction, $default-layout-direction);\n  }\n\n  @if $table {\n    @include -neat-warn(\"The omega mixin no longer removes padding in table layouts.\");\n  }\n\n  @if length($query) == 1 {\n    @if $auto {\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n\n    @else if contains-display-value($query) and $table == false {\n      margin-#{$direction}: 0;\n    }\n\n    @else {\n      @include nth-child($query, $direction);\n    }\n  } @else if length($query) == 2 {\n    @if $auto {\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    } @else {\n      @include nth-child(nth($query, 1), $direction);\n    }\n  } @else {\n    @include -neat-warn(\"Too many arguments passed to the omega() mixin.\");\n  }\n}\n\n@mixin nth-child($query, $direction) {\n  $opposite-direction: get-opposite-direction($direction);\n\n  &:nth-child(#{$query}) {\n    margin-#{$direction}: 0;\n  }\n\n  @if type-of($query) == number and unit($query) == \"n\" {\n    &:nth-child(#{$query}+1) {\n      clear: $opposite-direction;\n    }\n  }\n}\n"],
"names": [],
"file": "theme.css"
}